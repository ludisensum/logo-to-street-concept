{"version":3,"sources":["app/app.js","app/components/street-scene.js","app/initializers/export-application-global.js","app/router.js","app/templates/application.js","app/templates/components/street-scene.js","app/tests/app.jshint.js","app/tests/app/tests/helpers/resolver.jshint.js","app/tests/app/tests/helpers/start-app.jshint.js","app/tests/app/tests/test-helper.jshint.js","app/tests/helpers/resolver.js","app/tests/helpers/start-app.js","app/tests/router.jshint.js","app/tests/test-helper.js","vendor/ember-cli/app-suffix.js"],"sourcesContent":["define(\"app/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });","define(\"app/components/street-scene\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // Generated by EmberScript 0.0.14\n    var StreetScene;\n    var get$ = Ember.get;\n    StreetScene = Ember.Component.extend({\n      classNames: 'street-scene',\n      attributeBindings: 'style',\n      style: Ember.computed(function () {\n        if (get$(this, 'someState')) {\n          return '';\n        } else {\n          return 'transform: scale(7) translate(35px, 250px)';\n        }\n      }).property('someState'),\n      click: function () {\n        return this.toggleProperty('someState');\n      }\n    });\n    __exports__[\"default\"] = StreetScene;;\n  });","define(\"app/initializers/export-application-global\", \n  [\"ember\",\"app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal && !window[classifiedName]) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n\n    __exports__[\"default\"] = {\n      name: 'export-application-global',\n\n      initialize: initialize\n    };\n  });","define(\"app/router\", \n  [\"ember\",\"app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType,\n      rootUrl: '/logo-to-street-concept/'\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });","define(\"app/templates/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var stack1;\n\n\n      stack1 = helpers._triageMustache.call(depth0, \"street-scene\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(''); }\n      \n    });\n  });","define(\"app/templates/components/street-scene\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<div id=\\\"street\\\"><img src=\\\"luse-open.png\\\" /><img src=\\\"logo.png\\\" style=\\\"position: absolute; left: 530px; top: 90px; width: 150px\\\" /></div><img src=\\\"question.png\\\" />\");\n      \n    });\n  });","define(\"app/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - .');\n    test('app.js should pass jshint', function() { \n      ok(true, 'app.js should pass jshint.'); \n    });\n  });","define(\"app/tests/app/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - app/tests/helpers');\n    test('app/tests/helpers/resolver.js should pass jshint', function() { \n      ok(true, 'app/tests/helpers/resolver.js should pass jshint.'); \n    });\n  });","define(\"app/tests/app/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - app/tests/helpers');\n    test('app/tests/helpers/start-app.js should pass jshint', function() { \n      ok(true, 'app/tests/helpers/start-app.js should pass jshint.'); \n    });\n  });","define(\"app/tests/app/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - app/tests');\n    test('app/tests/test-helper.js should pass jshint', function() { \n      ok(true, 'app/tests/test-helper.js should pass jshint.'); \n    });\n  });","define(\"app/tests/helpers/resolver\", \n  [\"ember/resolver\",\"app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });","define(\"app/tests/helpers/start-app\", \n  [\"ember\",\"app/app\",\"app/router\",\"app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var application;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        application = Application.create(attributes);\n        application.setupForTesting();\n        application.injectTestHelpers();\n      });\n\n      return application;\n    }\n  });","define(\"app/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module('JSHint - .');\n    test('router.js should pass jshint', function() { \n      ok(true, 'router.js should pass jshint.'); \n    });\n  });","define(\"app/tests/test-helper\", \n  [\"app/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write('<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>');\n\n    QUnit.config.urlConfig.push({ id: 'nocontainer', label: 'Hide container'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? 'hidden' : 'visible';\n    document.getElementById('ember-testing-container').style.visibility = containerVisibility;\n  });","/* jshint ignore:start */\n\ndefine('app/config/environment', ['ember'], function(Ember) {\n  var prefix = 'app';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"app/tests/test-helper\");\n} else {\n  require(\"app/app\")[\"default\"].create({});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"app.js"}